syntax = "proto3";

package message;

//node -> master
service Node2MasterConn {
    rpc JoinGroup(JoinRequest) returns (JoinReply) {}
    rpc ExitGroup(ExitRequest) returns (ExitReply) {}
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatReply) {}
    rpc SendTaskResults(TaskResultReq) returns (TaskResultResp) {}
}

//join group
message JoinRequest {
    string ipAddr = 1; //tell master the ip of this node
    int32 port = 2;    //tell master the port of the node
    double bandwidth = 3;
    int32 machineType = 4;
    int32 groupIndex  = 5;
}

message JoinReply {
    bool reply = 1;
}

//exit group
message ExitRequest {
    string ipAddr = 1;
    int32 port = 2;
}

message ExitReply {
    bool reply = 1;
}

//node send heartbeat
message HeartbeatRequest {
    string ipAddr = 1;
    int32  port   = 2;
    int32  waitQueueLen = 3;
    int64  avgExecTime  = 4;
}

message HeartbeatReply {
    bool reply = 1;
}

message TaskInfo
{
//attribute needed to input
    string username = 1;
    double CPUReq   = 2;
    double memoryReq = 3;
    double diskReq   = 4;
    int64  runtimePreSet  = 5;  //for simualtion in edge nodes
    string taskName  = 6; //jobname
    string logicName = 7;
    double dataSize  = 8;
    int32  deadlineSlack = 9;
    string taskLocation  = 10; //needed if client to master

//attribute created in the master
    int32  taskId   = 11; //created by master
    int64  submitTST = 12; //timestamp when accepted by master
    int64  deadline = 13;
    int64  predictExecTime = 14;
    int64  predictTransTime = 15;
    int64  predictWaitTime  = 16;
    int64  predictExtraTime = 17;
    string assignNodeIP = 18;
    int32  assignNodePort = 19;
    int64  assignTST =  20; //timestamp when begin to assign

//attribute created in the node
    int64  recvTST   = 21;  //timestamp when receivied by node
    int64  execTST   =  22; //timestamp when begin to execute
    int64  finishTST =  23; //timestamp when begin to execute
    int32  runCnt    =  24; //update when accepted by node

//attribute changed in all steps
    int32 statusCode  = 25;
    string err        = 26;
}

//node send task result
message TaskResultReq {
    repeated TaskInfo taskResGp = 1;
}

message TaskResultResp {
    bool reply =  1;
}

//master -> node
service Master2NodeConn {
    rpc AssignTask(stream TaskChunk) returns (SendStatus) {}
    rpc AssignSimTasks(SimTaskAssignReq) returns (SendStatus) {}
}

//master assgin one task to node
message TaskChunk {
    TaskInfo info = 1;
    bytes content = 2;
}

enum SendStatusCode {
    Unknown = 0;
    Ok = 1;
    Failed = 2;
}

message SendStatus {
    string message = 1;
    SendStatusCode code = 2;
}

message SimTaskAssignReq {
    repeated TaskInfo taskGp = 1;
}

//client to master
service Client2MasterConn {
    rpc SubmitTasks(TaskSubmitReq) returns (TaskSubmitResp) {}
}

//client submit task
message TaskSubmitReq {
    repeated TaskInfo taskGp = 1;
}

message TaskSubmitResp {
    bool reply = 1;
}

service Master2ClientConn {
    rpc ReturnSubmittedTasks(TaskSubmitResReq) returns (TaskSubmitResResp) {}
}

message TaskSubmitResReq {
    repeated TaskInfo infoGp = 1;
}

message TaskSubmitResResp {
    bool reply = 1;
}